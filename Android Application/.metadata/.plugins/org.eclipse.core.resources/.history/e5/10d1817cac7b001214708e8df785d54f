package uk.ac.aber.guidedwalk.model;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import uk.ac.aber.guidedwalk.android.R;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Base64;
import uk.ac.aber.guidedwalk.log.Log;

/**
 * This Class implements the Singleton pattern.<!-- --> This class contains the
 * interface the system uses to download the XML data files as well as parsing
 * such files.
 * 
 * @author Karl Parry (kdp8)
 * 
 */
public final class LoadXML {

	private String path;
	private Walk walk = new Walk();

	public LoadXML() {
	}

	/**
	 * This method provides the interface to download an XML file located on a
	 * predefined URL stored in the strings.xml file under the name URL.
	 * 
	 * @param context
	 *            the context of the Activity implementing this method.
	 * @param filename
	 *            the filename of the XML file to be downloaded. Including the
	 *            .xml extension.
	 * @return boolean value. True if successful or false if failed.
	 */
	public boolean downloadXML(Context context, String filename) {
		return this.downloadXML(context, filename, null);
	}

	/**
	 * This method provides the interface to download an XML file located on a
	 * predefined URL stored in the strings.xml file under the name URL.
	 * 
	 * @param context
	 *            the context of the Activity implementing this method.
	 * @param filename
	 *            the filename of the XML file to be downloaded. Including the
	 *            .xml extension.
	 * @param directory
	 *            the folder name under the URL where the XML file is located.
	 *            Walks are under the walks folder.
	 * @return boolean value. True if successful or false if failed.
	 * 
	 * @throws IllegalArgumentException
	 *             throws exception if the context is null or if file name is
	 *             null. Pass the context as "this" from the Activity
	 *             implementing this function it
	 */
	public boolean downloadXML(Context context, String filename,
			String directory) {
		return downloadXML(context, filename, directory, false);
	}

	public boolean downloadXML(Context context, String filename,
			String directory, boolean temp) {
		if (context == null) {
			throw new IllegalArgumentException("Invalid context");
		}
		if (filename == null) {
			throw new IllegalArgumentException("Invalid filename");
		}
		path = context.getString(R.string.url);
		URL url;
		try {
			if (null == directory) {
				url = new URL(path + filename);
			} else {
				url = new URL(path + directory + filename);
			}
			URLConnection ucon = url.openConnection();
			BufferedInputStream bin = new BufferedInputStream(
					ucon.getInputStream());
			File file;
			if (temp) {
				file = new File(context.getFilesDir() + "temp.xml");
			} else {
				file = new File(context.getFilesDir() + filename);
			}
			BufferedOutputStream bout = new BufferedOutputStream(
					new FileOutputStream(file));
			int l;
			while ((l = bin.read()) != -1) {
				bout.write(l);
			}
			bin.close();
			bout.close();
			if (directory == null) {
				Log.i("DOWNLOAD_XML_MAP", "File id: " + filename + " SUCCESS");
			} else {
				Log.i("DOWNLOAD_WALK_XML", "File id: " + filename + " SUCCESS");
			}
			return true;

		} catch (Exception e) {
			if (directory == null) {
				Log.e("DOWNLOAD_XML_MAP", e.toString());
				Log.e("DOWNLOAD_XML_MAP", Log.getStackTraceString(e));
			} else {
				Log.e("DOWNLOAD_WALK_XML", e.toString());
				Log.e("DOWNLOAD_WALK_XML", Log.getStackTraceString(e));
			}
			return false;
		}
	}

	/**
	 * This method provides the interface to read an XML map file stored locally
	 * on the device. The XML map file contains the details about each of the
	 * available walk such as unique ID, title and description.
	 * 
	 * @param context
	 *            the context of the Activity implementing this method.
	 * @return an ArrayList containing the walk details of the XML map file.
	 * 
	 * @throws IllegalArgumentException
	 *             throws exception if the context is null. Pass the context as
	 *             "this" from the Activity implementing this function it
	 */
	public ArrayList<Walk> readXMLMap(Context context, String filename) {
		if (context == null) {
			throw new IllegalArgumentException("Invalid context");
		}
		ArrayList<Walk> walklist = new ArrayList<Walk>();
		try {
			int noms = 0;
			File file = new File(context.getFilesDir() + filename);
			if (file.exists()) {
				InputStream in = new FileInputStream(file);
				DocumentBuilderFactory dbf = DocumentBuilderFactory
						.newInstance();
				DocumentBuilder db = dbf.newDocumentBuilder();
				Document document = db.parse(in, null);
				Element root = document.getDocumentElement();
				NodeList rootnodelist = root.getChildNodes();

				for (int i = 0; i < rootnodelist.getLength(); i++) {
					Node item = rootnodelist.item(i);
					if (item.getNodeName().equalsIgnoreCase("numberofwalks")) {
						noms = Integer.parseInt(item.getFirstChild()
								.getNodeValue());
					} else if (item.getNodeName().equalsIgnoreCase("walklist")) {
						NodeList walks = item.getChildNodes();
						for (int j = 0; j < walks.getLength(); j++) {
							Node walk_ind = walks.item(j);
							if (walk_ind.getNodeName().equalsIgnoreCase("walk")) {
								NodeList walk = walk_ind.getChildNodes();
								Walk each_walk = new Walk();
								for (int k = 0; k < walk.getLength(); k++) {
									Node walk_item = walk.item(k);
									if (walk_item.getNodeName()
											.equalsIgnoreCase("id")) {
										each_walk
												.setId(walk_item
														.getFirstChild()
														.getNodeValue());
									} else if (walk_item.getNodeName()
											.equalsIgnoreCase("title")) {
										try {
											each_walk.setWalkTitle(walk_item
													.getFirstChild()
													.getNodeValue());
										} catch (NullPointerException e) {
											each_walk.setWalkTitle("");
										}
									} else if (walk_item.getNodeName()
											.equalsIgnoreCase("desc")) {
										try {
											each_walk.setWalkDesc(walk_item
													.getFirstChild()
													.getNodeValue());
										} catch (NullPointerException e) {
											each_walk.setWalkDesc("");
										}
									} else if (walk_item.getNodeName()
											.equalsIgnoreCase("welshtitle")) {
										try {
											each_walk
													.setWelshWalkTitle(walk_item
															.getFirstChild()
															.getNodeValue());
										} catch (NullPointerException e) {
											each_walk.setWelshWalkTitle("");
										}
									} else if (walk_item.getNodeName()
											.equalsIgnoreCase("welshdesc")) {
										try {
											each_walk
													.setWelshWalkDesc(walk_item
															.getFirstChild()
															.getNodeValue());
										} catch (NullPointerException e) {
											each_walk.setWelshWalkDesc("");
										}
									} else if (walk_item.getNodeName()
											.equalsIgnoreCase("difficulty")) {
										each_walk.setWalkDifficulty(Integer
												.parseInt(walk_item
														.getFirstChild()
														.getNodeValue()));
									} else if (walk_item.getNodeName()
											.equalsIgnoreCase("version")) {
										each_walk.setVersion(Integer
												.parseInt(walk_item
														.getFirstChild()
														.getNodeValue()));
									}
								}
								walklist.add(each_walk);
							}
						}
					}
				}
				in.close();
				if (noms == walklist.size()) {
					return walklist;
				} else {
					return null;
				}
			} else {
				return null;
			}
		} catch (NullPointerException e) {
			Log.e("READING_XML_MAP_NULL", e.toString());
			Log.e("READING_XML_MAP_NULL", Log.getStackTraceString(e));
			return null;
		} catch (IOException e) {
			Log.e("READING_XML_MAP_IO", e.toString());
			Log.e("READING_XML_MAP_IO", Log.getStackTraceString(e));
			return null;
		} catch (ParserConfigurationException e) {
			Log.e("READING_XML_MAP_PARSE", e.toString());
			Log.e("READING_XML_MAP_PARSE", Log.getStackTraceString(e));
			return null;
		} catch (SAXException e) {
			Log.e("READING_XML_MAP_SAX", e.toString());
			Log.e("READING_XML_MAP_SAX", Log.getStackTraceString(e));
			return null;
		}
	}

	/**
	 * This method provides the interface to read an XML walk file stored
	 * locally on the device. The XML walk file contains the details about a
	 * specific walk.
	 * 
	 * @param context
	 *            the context of the Activity implementing this method.
	 * @param walkid
	 *            the unique ID linked to the walk which will be read.
	 * @return a Walk object containing the walk details.
	 * 
	 * @throws IllegalArgumentException
	 *             throws exception if the context is null or walk is null. Pass
	 *             the context as "this" from the Activity implementing this
	 *             function it
	 */
	public Walk readWalk(Context context, String walkid) {
		if (context == null) {
			throw new IllegalArgumentException("Invalid context");
		}
		if (walkid == null) {
			throw new IllegalArgumentException("Invalid walk ID");
		}
		Waypoint waypoint;
		Image img;

		try {
			File file = new File(context.getFilesDir() + walkid + ".xml");
			InputStream in = new FileInputStream(file);
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document document = db.parse(in, null);
			Element root = document.getDocumentElement();
			NodeList rootnodelist = root.getChildNodes();

			for (int i = 0; i < rootnodelist.getLength(); i++) {
				Node item = rootnodelist.item(i);
				String name = item.getNodeName();
				if (name.equalsIgnoreCase("id")) {
					walk.setId(item.getFirstChild().getNodeValue());
				} else if (name.equalsIgnoreCase("walk_title")) {
					try {
						walk.setWalkTitle(item.getFirstChild().getNodeValue());
					} catch (NullPointerException e) {
						walk.setWalkTitle("");
					}
				} else if (name.equalsIgnoreCase("walk_desc")) {
					try {
						walk.setWalkDesc(item.getFirstChild().getNodeValue());
					} catch (NullPointerException e) {
						walk.setWalkDesc("");
					}
				} else if (name.equalsIgnoreCase("welsh_walk_title")) {
					try {
						walk.setWelshWalkTitle(item.getFirstChild()
								.getNodeValue());
					} catch (NullPointerException e) {
						walk.setWelshWalkTitle("");
					}
				} else if (name.equalsIgnoreCase("welsh_walk_desc")) {
					try {
						walk.setWelshWalkDesc(item.getFirstChild()
								.getNodeValue());
					} catch (NullPointerException e) {
						walk.setWelshWalkDesc("");
					}
				} else if (name.equalsIgnoreCase("walk_difficulty")) {
					walk.setWalkDifficulty(Integer.parseInt(item
							.getFirstChild().getNodeValue()));
				} else if (name.equalsIgnoreCase("version")) {
					walk.setVersion(Integer.parseInt(item.getFirstChild()
							.getNodeValue()));
				} else if (name.equalsIgnoreCase("walk_length")) {
					walk.setWalklength(Integer.parseInt(item.getFirstChild()
							.getNodeValue()));
				} else if (name.equalsIgnoreCase("route")) {
					NodeList route = item.getChildNodes();
					for (int j = 0; j < route.getLength(); j++) {
						Node nodeMarkers = route.item(j);
						if (nodeMarkers.getNodeName().equalsIgnoreCase(
								"waypoint")) {
							NodeList markerlist = nodeMarkers.getChildNodes();
							waypoint = new Waypoint();
							for (int k = 0; k < markerlist.getLength(); k++) {
								Node nodeMarker = markerlist.item(k);
								String markerName = nodeMarker.getNodeName();

								if (markerName
										.equalsIgnoreCase("waypoint_index")) {
									waypoint.setIndex(Integer
											.parseInt(nodeMarker
													.getFirstChild()
													.getNodeValue()));
								} else if (markerName
										.equalsIgnoreCase("waypoint_title")) {
									if (null != nodeMarker.getFirstChild()) {
										waypoint.setTitle(nodeMarker
												.getFirstChild().getNodeValue());
									}
								} else if (markerName
										.equalsIgnoreCase("waypoint_desc")) {
									if (null != nodeMarker.getFirstChild()) {
										waypoint.setDescription(nodeMarker
												.getFirstChild().getNodeValue());
									}
								} else if (markerName
										.equalsIgnoreCase("welsh_waypoint_title")) {
									if (null != nodeMarker.getFirstChild()) {
										waypoint.setWelshTitle(nodeMarker
												.getFirstChild().getNodeValue());
									}
								} else if (markerName
										.equalsIgnoreCase("welsh_waypoint_desc")) {
									if (null != nodeMarker.getFirstChild()) {
										waypoint.setWelshDescription(nodeMarker
												.getFirstChild().getNodeValue());
									}
								} else if (markerName.equalsIgnoreCase("lat")) {
									waypoint.setLat(Double
											.parseDouble(nodeMarker
													.getFirstChild()
													.getNodeValue()));
								} else if (markerName.equalsIgnoreCase("lng")) {
									waypoint.setLng(Double
											.parseDouble(nodeMarker
													.getFirstChild()
													.getNodeValue()));
								} else if (markerName
										.equalsIgnoreCase("number_of_images")) {
									waypoint.setNoimages(Integer
											.parseInt(nodeMarker
													.getFirstChild()
													.getNodeValue()));
								} else if (markerName
										.equalsIgnoreCase("images")) {
									NodeList imageList = nodeMarker
											.getChildNodes();
									for (int l = 0; l < imageList.getLength(); l++) {
										Node images = imageList.item(l);
										String imageid = images.getNodeName();
										if (imageid.equalsIgnoreCase("image")) {
											img = new Image();
											NodeList imagedetails = images
													.getChildNodes();
											for (int m = 0; m < imagedetails
													.getLength(); m++) {
												Node image = imagedetails
														.item(m);
												String imagenodename = image
														.getNodeName();
												if (imagenodename
														.equalsIgnoreCase("image_filename")) {
													img.setFilename(image
															.getFirstChild()
															.getNodeValue());
												} else if (imagenodename
														.equalsIgnoreCase("image_base64")) {
													String img64 = image
															.getFirstChild()
															.getNodeValue();
													byte[] bytearray = Base64
															.decode(img64,
																	Base64.DEFAULT);
													Bitmap bmp = BitmapFactory
															.decodeByteArray(
																	bytearray,
																	0,
																	bytearray.length);
													img.setBitmap(bmp);
												}
											}
											waypoint.addImage(img);
										}
									}
								}
							}
							walk.addWaypoint(waypoint);
						}

					}
				}
			}
			return walk;
		} catch (NullPointerException e) {
			Log.e("READING_WALK_XML_NULL", e.toString());
			Log.e("READING_WALK_XML_NULL", Log.getStackTraceString(e));
			return null;
		} catch (SAXException e) {
			Log.e("READING_WALK_XML_SAX", e.toString());
			Log.e("READING_WALK_XML_SAX", Log.getStackTraceString(e));
			return null;
		} catch (IOException e) {
			Log.e("READING_WALK_XML_SAX", e.toString());
			Log.e("READING_WALK_XML_SAX", Log.getStackTraceString(e));
			return null;
		} catch (ParserConfigurationException e) {
			Log.e("READING_WALK_XML_SAX", e.toString());
			Log.e("READING_WALK_XML_SAX", Log.getStackTraceString(e));
			return null;
		}

	}

}
